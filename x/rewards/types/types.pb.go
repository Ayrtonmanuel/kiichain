// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kiichain/rewards/v1beta1/types.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RewardReleaser defines information related to reward pool
type RewardReleaser struct {
	// Total amount to be rewarded
	TotalAmount types.Coin `protobuf:"bytes,1,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount" yaml:"total_amount"`
	// Amount released
	ReleasedAmount *types.Coin `protobuf:"bytes,2,opt,name=released_amount,json=releasedAmount,proto3" json:"released_amount,omitempty" yaml:"released_amount"`
	// Timestamp of end of release
	EndTime time.Time `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	// Last height released
	LastReleaseHeight int64 `protobuf:"varint,5,opt,name=last_release_height,json=lastReleaseHeight,proto3" json:"last_release_height,omitempty" yaml:"last_release_height"`
	// If reward pool is active
	Active bool `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty" yaml:"active"`
}

func (m *RewardReleaser) Reset()         { *m = RewardReleaser{} }
func (m *RewardReleaser) String() string { return proto.CompactTextString(m) }
func (*RewardReleaser) ProtoMessage()    {}
func (*RewardReleaser) Descriptor() ([]byte, []int) {
	return fileDescriptor_890c6773eb163743, []int{0}
}
func (m *RewardReleaser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardReleaser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardReleaser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardReleaser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardReleaser.Merge(m, src)
}
func (m *RewardReleaser) XXX_Size() int {
	return m.Size()
}
func (m *RewardReleaser) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardReleaser.DiscardUnknown(m)
}

var xxx_messageInfo_RewardReleaser proto.InternalMessageInfo

func (m *RewardReleaser) GetTotalAmount() types.Coin {
	if m != nil {
		return m.TotalAmount
	}
	return types.Coin{}
}

func (m *RewardReleaser) GetReleasedAmount() *types.Coin {
	if m != nil {
		return m.ReleasedAmount
	}
	return nil
}

func (m *RewardReleaser) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *RewardReleaser) GetLastReleaseHeight() int64 {
	if m != nil {
		return m.LastReleaseHeight
	}
	return 0
}

func (m *RewardReleaser) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

// RewardPool is the global fee pool for distribution.
type RewardPool struct {
	CommunityPool github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=community_pool,json=communityPool,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"community_pool"`
}

func (m *RewardPool) Reset()         { *m = RewardPool{} }
func (m *RewardPool) String() string { return proto.CompactTextString(m) }
func (*RewardPool) ProtoMessage()    {}
func (*RewardPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_890c6773eb163743, []int{1}
}
func (m *RewardPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardPool.Merge(m, src)
}
func (m *RewardPool) XXX_Size() int {
	return m.Size()
}
func (m *RewardPool) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardPool.DiscardUnknown(m)
}

var xxx_messageInfo_RewardPool proto.InternalMessageInfo

func (m *RewardPool) GetCommunityPool() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.CommunityPool
	}
	return nil
}

func init() {
	proto.RegisterType((*RewardReleaser)(nil), "kiichain.rewards.v1beta1.RewardReleaser")
	proto.RegisterType((*RewardPool)(nil), "kiichain.rewards.v1beta1.RewardPool")
}

func init() {
	proto.RegisterFile("kiichain/rewards/v1beta1/types.proto", fileDescriptor_890c6773eb163743)
}

var fileDescriptor_890c6773eb163743 = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xbf, 0x8e, 0xd3, 0x30,
	0x18, 0xaf, 0xa9, 0x28, 0x27, 0x97, 0xeb, 0xa9, 0x39, 0x84, 0x42, 0x41, 0x49, 0x15, 0x31, 0x94,
	0x7f, 0x8e, 0xee, 0x58, 0x10, 0x1b, 0x05, 0x21, 0x46, 0x64, 0xb1, 0xc0, 0x52, 0x39, 0x89, 0x49,
	0xad, 0x4b, 0xf2, 0x55, 0xb1, 0x7b, 0xd0, 0x81, 0x27, 0x60, 0xb9, 0x67, 0x60, 0x42, 0x4c, 0x3c,
	0x46, 0xc7, 0x1b, 0x99, 0x72, 0xa8, 0x1d, 0xd8, 0xfb, 0x04, 0x28, 0xb6, 0x13, 0x9d, 0xd0, 0x49,
	0x2c, 0x89, 0xbf, 0x4f, 0xbf, 0x3f, 0x9f, 0x7f, 0xb6, 0xf1, 0xfd, 0x13, 0x21, 0xe2, 0x39, 0x13,
	0x45, 0x58, 0xf2, 0x4f, 0xac, 0x4c, 0x64, 0x78, 0x7a, 0x14, 0x71, 0xc5, 0x8e, 0x42, 0xb5, 0x5a,
	0x70, 0x49, 0x16, 0x25, 0x28, 0x70, 0xdc, 0x06, 0x45, 0x2c, 0x8a, 0x58, 0xd4, 0xc8, 0x8b, 0x41,
	0xe6, 0x20, 0xc3, 0x88, 0x49, 0xde, 0x52, 0x63, 0x10, 0x85, 0x61, 0x8e, 0x6e, 0xa5, 0x90, 0x82,
	0x5e, 0x86, 0xf5, 0xca, 0x76, 0xfd, 0x14, 0x20, 0xcd, 0x78, 0xa8, 0xab, 0x68, 0xf9, 0x31, 0x54,
	0x22, 0xe7, 0x52, 0xb1, 0x7c, 0x61, 0x01, 0x43, 0x96, 0x8b, 0x02, 0x42, 0xfd, 0x35, 0xad, 0xe0,
	0x5b, 0x17, 0x0f, 0xa8, 0x76, 0xa7, 0x3c, 0xe3, 0x4c, 0xf2, 0xd2, 0x79, 0x8f, 0x6f, 0x2a, 0x50,
	0x2c, 0x9b, 0xb1, 0x1c, 0x96, 0x85, 0x72, 0xd1, 0x18, 0x4d, 0xfa, 0xc7, 0x77, 0x88, 0x99, 0x89,
	0xd4, 0x33, 0x35, 0x83, 0x92, 0x97, 0x20, 0x8a, 0xe9, 0xdd, 0x75, 0xe5, 0x77, 0x76, 0x95, 0x7f,
	0xb8, 0x62, 0x79, 0xf6, 0x3c, 0xb8, 0x4c, 0x0e, 0x68, 0x5f, 0x97, 0x2f, 0x74, 0xe5, 0x44, 0xf8,
	0xa0, 0x34, 0x36, 0x49, 0xa3, 0x7e, 0xed, 0x7f, 0xea, 0xde, 0xba, 0xf2, 0xd1, 0xae, 0xf2, 0x6f,
	0x1b, 0xf5, 0x7f, 0xf8, 0x01, 0x1d, 0x34, 0x1d, 0xeb, 0x41, 0xf1, 0x1e, 0x2f, 0x92, 0x59, 0xbd,
	0x77, 0xb7, 0xab, 0xc5, 0x47, 0xc4, 0x04, 0x43, 0x9a, 0x60, 0xc8, 0xbb, 0x26, 0x98, 0x76, 0xf6,
	0x03, 0xa3, 0xde, 0x30, 0x83, 0xb3, 0x0b, 0x1f, 0xd1, 0x1b, 0xbc, 0x48, 0x6a, 0xa8, 0x43, 0xf1,
	0x61, 0xc6, 0xa4, 0x9a, 0x59, 0xab, 0xd9, 0x9c, 0x8b, 0x74, 0xae, 0xdc, 0xeb, 0x63, 0x34, 0xe9,
	0x4e, 0x03, 0x3b, 0xe0, 0xc8, 0x48, 0x5c, 0x01, 0x0c, 0xe8, 0xb0, 0xee, 0xda, 0x84, 0xdf, 0xe8,
	0x9e, 0xf3, 0x00, 0xf7, 0x58, 0xac, 0xc4, 0x29, 0x77, 0x7b, 0x63, 0x34, 0xd9, 0x9b, 0x0e, 0x77,
	0x95, 0xbf, 0x6f, 0x24, 0x4c, 0x3f, 0xa0, 0x16, 0x10, 0x7c, 0x45, 0x18, 0x9b, 0x43, 0x7a, 0x0b,
	0x90, 0x39, 0x5f, 0xf0, 0x20, 0x86, 0x3c, 0x5f, 0x16, 0x42, 0xad, 0x66, 0x0b, 0x80, 0xcc, 0x45,
	0xe3, 0xee, 0xa4, 0x7f, 0x7c, 0xef, 0xca, 0x10, 0x5f, 0xf1, 0x58, 0xe7, 0xf8, 0xac, 0xde, 0xe9,
	0x8f, 0x0b, 0xff, 0x51, 0x2a, 0xd4, 0x7c, 0x19, 0x91, 0x18, 0xf2, 0xd0, 0x5e, 0x33, 0xf3, 0x7b,
	0x22, 0x93, 0x13, 0x7b, 0x3f, 0x2d, 0x47, 0x7e, 0xff, 0xf3, 0xf3, 0x21, 0xa2, 0xfb, 0xad, 0x5b,
	0x6d, 0x3f, 0x7d, 0xbd, 0xde, 0x78, 0xe8, 0x7c, 0xe3, 0xa1, 0xdf, 0x1b, 0x0f, 0x9d, 0x6d, 0xbd,
	0xce, 0xf9, 0xd6, 0xeb, 0xfc, 0xda, 0x7a, 0x9d, 0x0f, 0x8f, 0x2f, 0x49, 0xb7, 0x2f, 0xa0, 0x5d,
	0x7c, 0x6e, 0x1f, 0x83, 0x36, 0x89, 0x7a, 0xfa, 0x38, 0x9e, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0x4d, 0x9b, 0xa2, 0xc5, 0x2d, 0x03, 0x00, 0x00,
}

func (m *RewardReleaser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardReleaser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardReleaser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.LastReleaseHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastReleaseHeight))
		i--
		dAtA[i] = 0x28
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTypes(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if m.ReleasedAmount != nil {
		{
			size, err := m.ReleasedAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TotalAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RewardPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommunityPool) > 0 {
		for iNdEx := len(m.CommunityPool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CommunityPool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RewardReleaser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalAmount.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.ReleasedAmount != nil {
		l = m.ReleasedAmount.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovTypes(uint64(l))
	if m.LastReleaseHeight != 0 {
		n += 1 + sovTypes(uint64(m.LastReleaseHeight))
	}
	if m.Active {
		n += 2
	}
	return n
}

func (m *RewardPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CommunityPool) > 0 {
		for _, e := range m.CommunityPool {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardReleaser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardReleaser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardReleaser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleasedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReleasedAmount == nil {
				m.ReleasedAmount = &types.Coin{}
			}
			if err := m.ReleasedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReleaseHeight", wireType)
			}
			m.LastReleaseHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastReleaseHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommunityPool = append(m.CommunityPool, types.DecCoin{})
			if err := m.CommunityPool[len(m.CommunityPool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
